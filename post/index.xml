<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shioaji</title>
    <link>https://sinotrade.github.io/post/</link>
    <description>Recent content in Posts on Shioaji</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Nov 2018 11:14:38 +0800</lastBuildDate>
    
	<atom:link href="https://sinotrade.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contents</title>
      <link>https://sinotrade.github.io/post/contents/</link>
      <pubDate>Fri, 23 Nov 2018 11:14:38 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/contents/</guid>
      <description> 安裝  pip install docker  初始化  載入 初始api 登入 激活憑證  下單  Order物件 下單函式 Trade物件  帳務  權益數帳務 未平倉帳務 平倉損益   </description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://sinotrade.github.io/post/install/</link>
      <pubDate>Thu, 22 Nov 2018 10:45:13 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/install/</guid>
      <description> install Let&amp;rsquo;s get it pip install 直接pip install起來，台灣應該沒有其他券商的api那麼方便了。
pip install shioaji  docker 我們也準備好了docker image給各位直接使用，有需要那些其他的linux distribution歡迎在github上跟我們講。
docker run -it sinotrade/shioaji:latest bash  這邊沒有在使用docker的可以忽略，docker主要就是幫各位處理好各種環境問題，但是基本上大家應該pip install就可以開了
這邊也幫大家build好jupyter的環境，執行下面docker指令連到localhost:8888就可以使用了
docker run -p 8888:8888 sinotrade/shioaji:jupyter  </description>
    </item>
    
    <item>
      <title>Initialization</title>
      <link>https://sinotrade.github.io/post/init/</link>
      <pubDate>Thu, 22 Nov 2018 10:58:18 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/init/</guid>
      <description>init pip install shioaji 了之後，接著我們就可以用 python, ipython, jupyter notebook 或 JupyterLab 等編輯器開始接下來旅程。
在這邊我們還需要一個條件，就是請先開好永豐金證券的帳戶，實體開戶或是直接線上開戶。
準備好永豐帳戶就讓我們開始吧!
載入 起手式 import我們的api就像import tensorflow pandas等等一樣
import shioaji as sj  初始api 接著我們需要初始化Shioaji這個物件來開始接下來要做的事
ipython有個很方便的方法可以看這個物件或函式的文件，就是直接在function或object後面加上?
下面文件部分可以看到我們api底下所有可以用的function跟object以及初始化Shioaji的參數說明
input
sj.Shioaji?  output
Init signature: sj.Shioaji(backend=&#39;http&#39;, simulation=True, proxies={}, currency=&#39;NTD&#39;) Docstring: shioaji api Functions: login activate_ca list_accounts set_default_account get_account_margin get_account_openposition get_account_settle_profitloss place_order update_order update_status list_trades Objects: Contracts Order Init docstring: initialize Shioaji to start trading Args: backend (str): {http, socket} use http or socket as backend currently only support http, async socket backend coming soon.</description>
    </item>
    
    <item>
      <title>Ordering</title>
      <link>https://sinotrade.github.io/post/order/</link>
      <pubDate>Thu, 22 Nov 2018 11:29:00 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/order/</guid>
      <description>order 開始下單的部分吧!首先api的place_order下單的函式中，需要傳入兩個物件，分別是Contract及Order，我們可以從Contracts物件中找到我們要交易的商品Contract，以及用Order製作出一筆order物件，然後丟進函式中，這個函式會回傳一個Trade物件包含Contract, Order及這筆單的狀態物件(OrderStatus)。
Order物件 Order物件需要帶入的參數部分一樣可以用?直接看到文件
 input
api.Order?  output
Init signature: api.Order(action, price_type, order_type, price, quantity, *args, **kwargs) Docstring: The basic order object to place order Attributes: product_id (str): the code of product that order to placing action (srt): {B, S}, order action to buy or sell - B: buy - S: sell price_type (str): {LMT, MKT, MKP}, pricing type of order - LMT: limit - MKT: market - MKP: market range order_type (str): {ROD, IOC, FOK}, the type of order - ROD: Rest of Day - IOC: Immediate-or-Cancel - FOK: Fill-or-Kill octype (str): {&#39; &#39;, &#39;0&#39;, &#39;1&#39;, &#39;6&#39;}, the type or order to open new position or close position - &#39; &#39;: auto - &#39;0&#39;: new position - &#39;1&#39;: close position - &#39;6&#39;: day trade price (float or int): the price of order quantity (int): the quantity of order account (:obj:Account): which account to place this order ca (binary): the ca of this order   接著我們有做一件方便大家開發的事，有兩個物件api.</description>
    </item>
    
    <item>
      <title>Account</title>
      <link>https://sinotrade.github.io/post/account/</link>
      <pubDate>Thu, 22 Nov 2018 16:15:57 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/account/</guid>
      <description>account 下單ok後接著看帳務部分，帳務部份我們為了方便的與python的ecosystem結合，我們製作了將帳務的物件快速地轉換，就可以直接地變成pandas的Dataframe方便各位與自己的機器學習或深度學習模型直接介接。
權益數帳務 input
api.get_account_margin?  output
Signature: api.get_account_margin(currency=&#39;NTD&#39;, margin_type=&#39;1&#39;, account={}) Docstring: query margin currency: {NTX, USX, NTD, USD, HKD, EUR, JPY, GBP} the margin calculate in which currency - NTX: 約當台幣 - USX: 約當美金 - NTD: 新台幣 - USD: 美元 - HKD: 港幣 - EUR: 歐元 - JPY: 日幣 - GBP: 英鎊 margin_type: {&#39;1&#39;, &#39;2&#39;} query margin type - 1 : 即時 - 2 : 風險  input</description>
    </item>
    
    <item>
      <title>DevelopEnvSetup</title>
      <link>https://sinotrade.github.io/post/devenv/</link>
      <pubDate>Fri, 18 Jan 2019 16:15:57 +0800</pubDate>
      
      <guid>https://sinotrade.github.io/post/devenv/</guid>
      <description>開發環境設置Windows Windows開發環境安裝app清單
 git(version control) vscode(text editor) miniconda(python package management) docker(optional)  Git 下載window版本Git 安裝時請選Use Git and optional Unix tools from the Windows Command Prompt
VSCode 下載Windows版本VSCode 安裝後到插件管理中搜尋python並安裝
miniconda 下載miniconda 我們在windows中使用miniconda來安裝我們的環境，安裝完成後打開cmd，輸入 conda install jupyterlab pandas -y 把相關的套件裝好接著輸入jupyter lab，打開瀏覽器連到 localhost:8888 就可以連到jupyter開始使用。</description>
    </item>
    
  </channel>
</rss>