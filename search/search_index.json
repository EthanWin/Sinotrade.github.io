{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Overview"},{"location":"#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"#installation","text":"","title":"Installation"},{"location":"#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"quickstart/","text":"Initialization \u00b6 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / . Streaming Market Data \u00b6 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function. Place Order \u00b6 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. Conclusion \u00b6 This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Quick Start"},{"location":"quickstart/#initialization","text":"import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Initialization"},{"location":"quickstart/#streaming-market-data","text":"api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order.","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Conclusion"},{"location":"release/","text":"version: 0.1.2.dev2 (2020-03-10) \u00b6 feat: add limit_up, limit_down, update_date, day_trade on contract commit_id: 6bcd67db release_at: 2020-03-10 05:59:08.727 version: 0.1.2.dev1 (2020-03-08) \u00b6 refactor: ticks schema commit_id: 61765f3f release_at: 2020-03-08 07:02:25.860 version: 0.1.2.dev0 (2020-03-04) \u00b6 refactor: Order price accept float -> StrictInt and float refactor: Order quantity does not allow zero commit_id: 947085ea release_at: 2020-03-04 03:02:38.261 version: 0.1.1.dev9 (2020-03-02) \u00b6 feat: add contract blocking mode when login commit_id: 8f25b46a release_at: 2020-03-02 11:10:18.439 version: 0.1.1.dev8 (2020-02-27) \u00b6 fix: subscribe quote type feat: add tft quote callback commit_id: b498281e release_at: 2020-02-27 07:07:42.005 version: 0.1.1.dev7 (2020-02-24) \u00b6 feat: add list positions with the summary commit_id: fc53d871 release_at: 2020-02-24 08:29:02.749 version: 0.1.1.dev6 (2020-02-17) \u00b6 fix: remove ujson requirement commit_id: 8f33a21f release_at: 2020-02-17 06:50:13.220 version: 0.1.1.dev5 (2020-02-17) \u00b6 fix: login speed slow commit_id: ad8b2c75 release_at: 2020-02-17 03:31:59.709 version: 0.1.1.dev4 (2020-02-15) \u00b6 fix logout issue commit_id: 2362453a release_at: 2020-02-15 00:36:54.737 version: 0.1.1.dev3 (2020-02-07) \u00b6 tft for update status tft for update order tft for cancel order commit_id: 4a050ab4 release_at: 2020-02-07 09:19:09.221 version: 0.1.1.dev2 (2020-02-07) \u00b6 feat: sentry with user tracking commit_id: 8f6e6663 release_at: 2020-02-07 06:47:07.788 version: 0.1.1.dev1 (2020-02-06) \u00b6 feat: error tracking with sentry enable commit_id: 50e349a8 release_at: 2020-02-06 05:25:24.324 version: 0.1.1.dev0 (2020-01-31) \u00b6 fix: Shioaji update status commit_id: d25d55e6 release_at: 2020-01-31 08:57:33.474 version: 0.1.0.dev9 (2020-01-21) \u00b6 feat: tft order commit_id: 7a9d19c5 release_at: 2020-01-21 02:55:54.768 version: 0.1.0.dev8 (2020-01-09) \u00b6 feat: update_status callback mode feat: cancel_order callback mode feat: update_order callback mode feat: login with fetch contract callback commit_id: ee3a6aa7 release_at: 2020-01-09 03:06:57.263","title":"Release Note"},{"location":"release/#version-012dev2-2020-03-10","text":"feat: add limit_up, limit_down, update_date, day_trade on contract commit_id: 6bcd67db release_at: 2020-03-10 05:59:08.727","title":"version: 0.1.2.dev2 (2020-03-10)"},{"location":"release/#version-012dev1-2020-03-08","text":"refactor: ticks schema commit_id: 61765f3f release_at: 2020-03-08 07:02:25.860","title":"version: 0.1.2.dev1 (2020-03-08)"},{"location":"release/#version-012dev0-2020-03-04","text":"refactor: Order price accept float -> StrictInt and float refactor: Order quantity does not allow zero commit_id: 947085ea release_at: 2020-03-04 03:02:38.261","title":"version: 0.1.2.dev0 (2020-03-04)"},{"location":"release/#version-011dev9-2020-03-02","text":"feat: add contract blocking mode when login commit_id: 8f25b46a release_at: 2020-03-02 11:10:18.439","title":"version: 0.1.1.dev9 (2020-03-02)"},{"location":"release/#version-011dev8-2020-02-27","text":"fix: subscribe quote type feat: add tft quote callback commit_id: b498281e release_at: 2020-02-27 07:07:42.005","title":"version: 0.1.1.dev8 (2020-02-27)"},{"location":"release/#version-011dev7-2020-02-24","text":"feat: add list positions with the summary commit_id: fc53d871 release_at: 2020-02-24 08:29:02.749","title":"version: 0.1.1.dev7 (2020-02-24)"},{"location":"release/#version-011dev6-2020-02-17","text":"fix: remove ujson requirement commit_id: 8f33a21f release_at: 2020-02-17 06:50:13.220","title":"version: 0.1.1.dev6 (2020-02-17)"},{"location":"release/#version-011dev5-2020-02-17","text":"fix: login speed slow commit_id: ad8b2c75 release_at: 2020-02-17 03:31:59.709","title":"version: 0.1.1.dev5 (2020-02-17)"},{"location":"release/#version-011dev4-2020-02-15","text":"fix logout issue commit_id: 2362453a release_at: 2020-02-15 00:36:54.737","title":"version: 0.1.1.dev4 (2020-02-15)"},{"location":"release/#version-011dev3-2020-02-07","text":"tft for update status tft for update order tft for cancel order commit_id: 4a050ab4 release_at: 2020-02-07 09:19:09.221","title":"version: 0.1.1.dev3 (2020-02-07)"},{"location":"release/#version-011dev2-2020-02-07","text":"feat: sentry with user tracking commit_id: 8f6e6663 release_at: 2020-02-07 06:47:07.788","title":"version: 0.1.1.dev2 (2020-02-07)"},{"location":"release/#version-011dev1-2020-02-06","text":"feat: error tracking with sentry enable commit_id: 50e349a8 release_at: 2020-02-06 05:25:24.324","title":"version: 0.1.1.dev1 (2020-02-06)"},{"location":"release/#version-011dev0-2020-01-31","text":"fix: Shioaji update status commit_id: d25d55e6 release_at: 2020-01-31 08:57:33.474","title":"version: 0.1.1.dev0 (2020-01-31)"},{"location":"release/#version-010dev9-2020-01-21","text":"feat: tft order commit_id: 7a9d19c5 release_at: 2020-01-21 02:55:54.768","title":"version: 0.1.0.dev9 (2020-01-21)"},{"location":"release/#version-010dev8-2020-01-09","text":"feat: update_status callback mode feat: cancel_order callback mode feat: update_order callback mode feat: login with fetch contract callback commit_id: ee3a6aa7 release_at: 2020-01-09 03:06:57.263","title":"version: 0.1.0.dev8 (2020-01-09)"},{"location":"tutor/contract/","text":"Login Fecth Contracts \u00b6 Login \u00b6 In import shioaji as sj api = sj . Shioaji () api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_cb = lambda security_type : print ( f \"{repr(security_type)} fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have contracts_cb in login function that you can pass your customize function define how to do when the contract fetched. In this exmaple, we just print what kind of contract when it has been fetched. contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , ) Contracts \u00b6 In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None . Stock Contract \u00b6 In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ) Futures Contract \u00b6 In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' ) In above two highlight lines, you can get same contract with different way. Options Contract \u00b6 In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' )) Get options by code. In api . Contracts . Options . TX1 . TX1202003010300C Out Option ( code = 'TX110300C0' , symbol = 'TX1202003010300C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX1' , delivery_month = '202003' , strike_price = 10300.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' ) Get put options with readable way. Index Contract \u00b6 In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at net topic. Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Contract"},{"location":"tutor/contract/#login-fecth-contracts","text":"","title":"Login Fecth Contracts"},{"location":"tutor/contract/#login","text":"In import shioaji as sj api = sj . Shioaji () api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_cb = lambda security_type : print ( f \"{repr(security_type)} fetch done.\" ) ) Out [ FutureAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' ), StockAccount ( person_id = '' , broker_id = '' , account_id = '' , signed = True , username = '' )] < SecurityType . Index : 'IND' > fetch done . < SecurityType . Future : 'FUT' > fetch done . < SecurityType . Option : 'OPT' > fetch done . < SecurityType . Stock : 'STK' > fetch done . After login success we will start to fetch all kind of contract but fetching will not block other action. So how to know the fetch action is done ? We have contracts_cb in login function that you can pass your customize function define how to do when the contract fetched. In this exmaple, we just print what kind of contract when it has been fetched. contracts_timeout If you set contracts_timeout inside login from 0 to 10000, it will block the fetch and wait 10 second until the contract is back. api . login ( person_id = 'YOUR_ID' , passwd = 'YOUR_PASSWORD' , contracts_timeout = 10000 , )","title":"Login"},{"location":"tutor/contract/#contracts","text":"In api . Contracts Out Contracts ( Indexs = ( OTC , TSE ), Stocks = ( OES , OTC , TSE ), Futures = ( BRF , CAF , CBF , CCF , CDF , CEF , CFF , CGF , CHF , CJF , CK1 , CKF , CLF , CM1 , CMF , CNF , CQF , CRF , CSF , CU1 , CUF , CWF , CXF , CYF , CZ1 , CZF , DCF , DD1 , DDF , DEF , DFF , DGF , DHF , DIF , DJF , DKF , DLF , DNF , DOF , DPF , DQF , DSF , DUF , DVF , DWF , DXF , DYF , DZF , EEF , EGF , EHF , EMF , EPF , ERF , EXF , EY1 , EYF , FEF , FFF , FGF , FKF , FQF , FRF , FTF , FVF , FWF , FXF , FYF , FZF , G2F , GAF , GCF , GDF , GHF , GIF , GJF , GLF , GMF , GNF , GOF , GRF , GTF , GUF , GWF , GXF , GZF , HAF , HBF , HCF , HHF , HIF , HLF , HOF , HS1 , HSF , HY1 , HYF , IA1 , IAF , IHF , IIF , IJF , IMF , IOF , IPF , IQF , IRF , ITF , IXF , IYF , IZF , JBF , JFF , JNF , JPF , JSF , JWF , JZF , KAF , KB1 , KBF , KCF , KDF , KFF , KGF , KIF , KKF , KLF , KOF , KPF , KSF , KWF , LBF , LCF , LE1 , LEF , LIF , LMF , LOF , LQF , LRF , LTF , LUF , LVF , LWF , LXF , LYF , MAF , MBF , MCF , MJF , MKF , MPF , MQF , MVF , MX1 , MXF , MYF , NAF , NBF , NCF , NDF , NEF , NGF , NHF , NIF , NJF , NLF , NMF , NNF , NOF , NQF , NSF , NUF , NVF , NWF , NXF , NYF , NZF , OAF , OBF , OCF , ODF , OEF , OGF , OHF , OJF , OKF , OLF , OMF , OOF , OPF , OQF , ORF , OS1 , OSF , OTF , OUF , OVF , OWF , OXF , OYF , OZF , PAF , PBF , PCF , PDF , PEF , PFF , PGF , PHF , PIF , PJF , PKF , PLF , PMF , PNF , POF , PPF , PQF , RHF , RTF , SPF , T5F , TGF , TJF , TXF , UDF , UNF , XAF , XBF , XEF , XIF , XJF ), Options = ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO )) If your contracts have been downloaded, will see the output like above. If part of that kind contract download not yet, It will still be None .","title":"Contracts"},{"location":"tutor/contract/#stock-contract","text":"In contract_2890 = api . Contracts . Stocks [ \"2890\" ] contract_2890 Out Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' )","title":"Stock Contract"},{"location":"tutor/contract/#futures-contract","text":"In contract_txf = api . Contracts . Futures [ 'TXFC0' ] contract_txf = api . Contracts . Futures . TXF . TXF202003 contract_txf Out Future ( code = 'TXFC0' , symbol = 'TXF202003' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202003' , underlying_kind = 'I' ) In above two highlight lines, you can get same contract with different way.","title":"Futures Contract"},{"location":"tutor/contract/#options-contract","text":"In api . Contracts . Options Out ( CAO , CBO , CCO , CDO , CEO , CFO , CGO , CHO , CJO , CKO , CLO , CMO , CNO , CQO , CRO , CSO , CXO , CZO , DCO , DEO , DFO , DGO , DHO , DJO , DKO , DLO , DNO , DOO , DPO , DQO , DSO , DUO , DVO , DWO , DXO , GIO , GXO , HCO , IJO , LOO , NYA , NYO , NZO , OAO , OBO , OCO , OJO , OKO , OOO , OZO , RHO , RTO , TEO , TFO , TGO , TX1 , TXO ) Options object show all avaiable options product. In api . Contracts . Options [ \"TXO10000C0\" ] Out Option ( code = 'TXO10000C0' , symbol = 'TXO202003010000C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' )) Get options by code. In api . Contracts . Options . TX1 . TX1202003010300C Out Option ( code = 'TX110300C0' , symbol = 'TX1202003010300C' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TX1' , delivery_month = '202003' , strike_price = 10300.0 , option_right =< OptionRight . Call : 'C' > , underlying_kind = 'I' ) Get options with readable way. In api . Contracts . Options . TXO . TXO202003010000P Out Option ( code = 'TXO10000O0' , symbol = 'TXO202003010000P' , name = '\u81fa\u6307\u9078\u64c7\u6b0a' , category = 'TXO' , delivery_month = '202003' , strike_price = 10000.0 , option_right =< OptionRight . Put : 'P' > , underlying_kind = 'I' ) Get put options with readable way.","title":"Options Contract"},{"location":"tutor/contract/#index-contract","text":"In api . Contracts . Indexs . TSE Out TSE ( TSE001 , TSE015 , TSE016 , TSE017 , TSE018 , TSE019 , TSE020 , TSE022 , TSE023 , TSE024 , TSE025 , TSE026 , TSE028 , TSE029 , TSE030 , TSE031 , TSE032 , TSE033 , TSE035 , TSE036 , TSE037 , TSE038 , TSE039 , TSE040 , TSE041 , TSE042 , TSE043 , TSE004 , TSE005 ) In api . Contracts . Indexs . TSE . TSE001 Out Index ( exchange =< Exchange . TSE : 'TSE' > , code = '001' , symbol = 'TSE001' , name = '\u52a0\u6b0a' ) This contract is not avaiable to place order, but allow to subscribe the quote. It will be disuccess at net topic.","title":"Index Contract"},{"location":"tutor/contract/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/relay/","text":"Relay is report of order action. When you place order, cancel order and update order, Relay will return an OrderState. OrderState is order info. For Example \u00b6 Stock Trade for Trade \u00b6 Stock Trade for Trade replay jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Price \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Stock \u00b6 Stock replay jupyter link Place Order \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 11.5 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) Out OrderState . Order { 'operation' : { 'op_type' : 'NEW' , 'op_code' : '00' , 'op_msg' : '' }, 'order' :{ 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890255 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . Order { 'operation' : { 'op_type' : 'CANCEL' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890300 , 'modified_price' : 0 , 'cancel_quantity' : 3 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } } Update Quantity \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade , price = 11.5 , qty = 1 ) Out OrderState . Order { 'operation' : { 'op_type' : 'UPDATE' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890275 , 'modified_price' : 0 , 'cancel_quantity' : 1 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Relay"},{"location":"tutor/relay/#for-example","text":"","title":"For Example"},{"location":"tutor/relay/#stock-trade-for-trade","text":"Stock Trade for Trade replay jupyter link","title":"Stock Trade for Trade"},{"location":"tutor/relay/#place-order","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'New' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583828972 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Place Order"},{"location":"tutor/relay/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'Cancel' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'c21b876d' , 'seqno' : '429832' , 'ordno' : 'W2892' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'c21b876d' , 'exchange_ts' : 1583829131 , 'modified_price' : 0 , 'cancel_quantity' : 10 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/relay/#update-price","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.5 , quantity = 10 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdatePrice' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.5 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829166 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Price"},{"location":"tutor/relay/#update-quantity","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , quantity = 2 ) Out OrderState . TFTOrder { 'operation' : { 'op_type' : 'UpdateQty' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : 'a5cff9b6' , 'seqno' : '429833' , 'ordno' : 'W2893' , 'action' : 'Buy' , 'price' : 12.0 , 'quantity' : 10 , 'order_cond' : 'Cash' , 'order_type' : 'ROD' , 'price_type' : 'LMT' }, 'status' : { 'id' : 'a5cff9b6' , 'exchange_ts' : 1583829187 , 'modified_price' : 0 , 'cancel_quantity' : 2 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"tutor/relay/#stock","text":"Stock replay jupyter link","title":"Stock"},{"location":"tutor/relay/#place-order_1","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 11.5 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , ) trade = api . place_order ( contract , order ) Out OrderState . Order { 'operation' : { 'op_type' : 'NEW' , 'op_code' : '00' , 'op_msg' : '' }, 'order' :{ 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890255 , 'modified_price' : 0 , 'cancel_quantity' : 0 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Place Order"},{"location":"tutor/relay/#cancel-order_1","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) Out OrderState . Order { 'operation' : { 'op_type' : 'CANCEL' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890300 , 'modified_price' : 0 , 'cancel_quantity' : 3 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Cancel Order"},{"location":"tutor/relay/#update-quantity_1","text":"In api . update_status ( api . stock_account ) api . update_order ( trade , price = 11.5 , qty = 1 ) Out OrderState . Order { 'operation' : { 'op_type' : 'UPDATE' , 'op_code' : '00' , 'op_msg' : '' }, 'order' : { 'id' : '202163f1' , 'seqno' : '257764' , 'ordno' : 'I1404' , 'action' : 'Buy' , 'price' : 11.5 , 'quantity' : 3 , 'order_cond' : 'Cash' }, 'status' : { 'id' : '202163f1' , 'exchange_ts' : 1583890275 , 'modified_price' : 0 , 'cancel_quantity' : 1 }, 'contract' : { 'security_type' : 'STK' , 'exchange' : 'TSE' , 'code' : '2890' , 'symbol' : '' , 'name' : '' , 'currency' : 'TWD' } }","title":"Update Quantity"},{"location":"tutor/accounting/position/","text":"Coming Soon \u00b6","title":"Position"},{"location":"tutor/accounting/position/#coming-soon","text":"","title":"Coming Soon"},{"location":"tutor/market_data/historical/","text":"Ticks Data \u00b6 Ticks Schema \u00b6 In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass ticks function api \u00b6 In ticks = api . ticks ( api . Contracts . Stocks [ \"2330\" ], \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] ) Ticks to DataFrame \u00b6 In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90 KBar Data \u00b6 Coming Soon \u00b6 Snapshot \u00b6 Coming Soon \u00b6","title":"Historical Market Data"},{"location":"tutor/market_data/historical/#ticks-data","text":"","title":"Ticks Data"},{"location":"tutor/market_data/historical/#ticks-schema","text":"In from shioaji.data import Ticks Ticks ?? Out Init signature : Ticks ( ** data : Any ) -> None Docstring : < no docstring > Source : class Ticks ( BaseModel ): ts : typing . List [ int ] close : typing . List [ float ] volume : typing . List [ int ] bid_price : typing . List [ float ] bid_volume : typing . List [ int ] ask_price : typing . List [ float ] ask_volume : typing . List [ int ] File : shioaji / data . py Type : ModelMetaclass","title":"Ticks Schema"},{"location":"tutor/market_data/historical/#ticks-function-api","text":"In ticks = api . ticks ( api . Contracts . Stocks [ \"2330\" ], \"2020-03-04\" ) ticks Out Ticks ( ts = [ 1583312400821000000 , 1583312405836000000 , 1583312410849000000 , 1583312415864000000 , 1583312420877000000 ], close = [ 322.0 , 321.5 , 321.0 , 321.0 , 321.0 ], volume = [ 5098 , 91 , 126 , 59 , 90 ], bid_price = [ 321.5 , 321.0 , 321.0 , 321.0 , 321.0 ], bid_volume = [ 5 , 100 , 94 , 78 , 20 ], ask_price = [ 322.0 , 321.5 , 321.5 , 321.5 , 321.5 ], ask_volume = [ 646 , 13 , 31 , 86 , 199 ] )","title":"ticks function api"},{"location":"tutor/market_data/historical/#ticks-to-dataframe","text":"In import pandas as pd df = pd . DataFrame ({ ** ticks }) df . ts = pd . to_datetime ( df . ts ) df . head () Out ts ask_volume ask_price close bid_price bid_volume volume 0 2020-03-04 09:00:00.821 646 322.0 322.0 321.5 5 5098 1 2020-03-04 09:00:05.836 13 321.5 321.5 321.0 100 91 2 2020-03-04 09:00:10.849 31 321.5 321.0 321.0 94 126 3 2020-03-04 09:00:15.864 86 321.5 321.0 321.0 78 59 4 2020-03-04 09:00:20.877 199 321.5 321.0 321.0 20 90","title":"Ticks to DataFrame"},{"location":"tutor/market_data/historical/#kbar-data","text":"","title":"KBar Data"},{"location":"tutor/market_data/historical/#coming-soon","text":"","title":"Coming Soon"},{"location":"tutor/market_data/historical/#snapshot","text":"","title":"Snapshot"},{"location":"tutor/market_data/historical/#coming-soon_1","text":"","title":"Coming Soon"},{"location":"tutor/market_data/streaming/","text":"subscribe \u00b6 In api . quote . subscribe ? Out Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , ) Docstring : < no docstring > Type : method In above you can see the subscribe function signature with contract and quote type parameter, contract we have discussed in previous topic. quote_type is about which quote you want to subscribe(tick or bidask). Tick \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Out Response Code : 200 | Event Code : 16 | Info : MKT / TSE / 2330 | Event : Subscribe or Unsubscribe ok You can start receiving tick data by above action. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok MKT / redisrd / TSE / 2330 { 'Close' : [ 239.5 ], 'Time' : '11:11:42.624718' , 'VolSum' : [ 12206 ], 'Volume' : [ 5 ]} MKT / redisrd / TSE / 2330 { 'Close' : [ 239.5 ], 'Time' : '11:11:47.628718' , 'VolSum' : [ 12206 ], 'Volume' : [ 2 ]} quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. BidAsk \u00b6 In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk ) Out Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / redisrd / TSE / 2330 { 'AskPrice' : [ 240.0 , 240.5 , 241.0 , 241.5 , 242.0 ], 'AskVolume' : [ 1808 , 1789 , 1645 , 582 , 1170 ], 'BidPrice' : [ 239.5 , 239.0 , 238.5 , 238.0 , 237.5 ], 'BidVolume' : [ 204 , 765 , 389 , 475 , 359 ], 'Date' : '2019/03/18' , 'Time' : '11:11:42.624718' } quote_type set as 'bidask' will receive the order book data. Quote Callback \u00b6 In default, we set quote callback as print function. Let's talk about set quote callback In @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: {topic} , Quote: {quote} \" ) Out Topic : MKT / redisrd / TSE / 2330 , Quote : { 'Close' : [ 239.5 ], 'Time' : '11:11:42.624718' , 'VolSum' : [ 12206 ], 'Volume' : [ 5 ]} In above with pythonic way using decorator to set your quote callback. When callback setting done, The new arrived quote will use this function to processing. In def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: {topic} , Quote: {quote} \" ) api . quote . set_quote_callback ( quote_callback ) The traditional way to set quote callback. Event Callback \u00b6 event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: {event_code} | Event: {event} ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature. Event Code \u00b6 Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow. Quote Format \u00b6 Tick \u00b6 BidAsk \u00b6 Conclusion \u00b6 Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Streaming Market Data"},{"location":"tutor/market_data/streaming/#subscribe","text":"In api . quote . subscribe ? Out Signature : api . quote . subscribe ( contract : shioaji . contracts . Contract , quote_type : shioaji . constant . QuoteType =< QuoteType . Tick : 'tick' > , ) Docstring : < no docstring > Type : method In above you can see the subscribe function signature with contract and quote type parameter, contract we have discussed in previous topic. quote_type is about which quote you want to subscribe(tick or bidask).","title":"subscribe"},{"location":"tutor/market_data/streaming/#tick","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . Tick ) Out Response Code : 200 | Event Code : 16 | Info : MKT / TSE / 2330 | Event : Subscribe or Unsubscribe ok You can start receiving tick data by above action. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok MKT / redisrd / TSE / 2330 { 'Close' : [ 239.5 ], 'Time' : '11:11:42.624718' , 'VolSum' : [ 12206 ], 'Volume' : [ 5 ]} MKT / redisrd / TSE / 2330 { 'Close' : [ 239.5 ], 'Time' : '11:11:47.628718' , 'VolSum' : [ 12206 ], 'Volume' : [ 2 ]} quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter. In api . quote . subscribe ( api . Contracts . Stocks [ \"2890\" ], quote_type = 'tick' ) Out Response Code : 200 | Event Code : 16 | Info : MKT /*/ TSE / 2890 | Event : Subscribe or Unsubscribe ok quote_type can also be just string 'tick' is same as sj.constant.QuoteType.Tick , we create enum for your with editor can just use autocomplete tools to help you typing less letter.","title":"Tick"},{"location":"tutor/market_data/streaming/#bidask","text":"In api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = sj . constant . QuoteType . BidAsk ) Out Response Code : 200 | Event Code : 16 | Info : QUT /*/ TSE / 2330 | Event : Subscribe or Unsubscribe ok QUT / redisrd / TSE / 2330 { 'AskPrice' : [ 240.0 , 240.5 , 241.0 , 241.5 , 242.0 ], 'AskVolume' : [ 1808 , 1789 , 1645 , 582 , 1170 ], 'BidPrice' : [ 239.5 , 239.0 , 238.5 , 238.0 , 237.5 ], 'BidVolume' : [ 204 , 765 , 389 , 475 , 359 ], 'Date' : '2019/03/18' , 'Time' : '11:11:42.624718' } quote_type set as 'bidask' will receive the order book data.","title":"BidAsk"},{"location":"tutor/market_data/streaming/#quote-callback","text":"In default, we set quote callback as print function. Let's talk about set quote callback In @api . quote . on_quote def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: {topic} , Quote: {quote} \" ) Out Topic : MKT / redisrd / TSE / 2330 , Quote : { 'Close' : [ 239.5 ], 'Time' : '11:11:42.624718' , 'VolSum' : [ 12206 ], 'Volume' : [ 5 ]} In above with pythonic way using decorator to set your quote callback. When callback setting done, The new arrived quote will use this function to processing. In def quote_callback ( topic : str , quote : dict ): print ( f \"Topic: {topic} , Quote: {quote} \" ) api . quote . set_quote_callback ( quote_callback ) The traditional way to set quote callback.","title":"Quote Callback"},{"location":"tutor/market_data/streaming/#event-callback","text":"event In this api, we use solace as mesh borker. This event mean the status for your client with solace connection situation. If you have no experience with networking, please skip this part, In defalut, we help you reconnect solace broker 50 times without any setting. Best way is keep your network connection alive. In @api . quote . on_event def event_callback ( resp_code : int , event_code : int , info : str , event : str ): print ( f 'Event code: {event_code} | Event: {event} ' ) Out Event code : 16 | Event : Subscribe or Unsubscribe ok Like the quote callback, your can also set event cllback with two way just make quote -> event . In api . quote . set_event_callback ? Out Signature : api . quote . set_event_callback ( func : Callable [[ int , int , str , str ], NoneType ]) -> None Docstring : < no docstring > Type : method If you want to set event callback please pay attention one the event callback signature.","title":"Event Callback"},{"location":"tutor/market_data/streaming/#event-code","text":"Event Code Event Code Enumerator Description 0 SOLCLIENT_SESSION_EVENT_UP_NOTICE The Session is established. 1 SOLCLIENT_SESSION_EVENT_DOWN_ERROR The Session was established and then went down. 2 SOLCLIENT_SESSION_EVENT_CONNECT_FAILED_ERROR The Session attempted to connect but was unsuccessful. 3 SOLCLIENT_SESSION_EVENT_REJECTED_MSG_ERROR The appliance rejected a published message. 4 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_ERROR The appliance rejected a subscription (add or remove). 5 SOLCLIENT_SESSION_EVENT_RX_MSG_TOO_BIG_ERROR The API discarded a received message that exceeded the Session buffer size. 6 SOLCLIENT_SESSION_EVENT_ACKNOWLEDGEMENT The oldest transmitted Persistent/Non-Persistent message that has been acknowledged. 7 SOLCLIENT_SESSION_EVENT_ASSURED_PUBLISHING_UP Deprecated -- see notes in solClient_session_startAssuredPublishing.The AD Handshake (that is, Guaranteed Delivery handshake) has completed for the publisher and Guaranteed messages can be sent. 8 SOLCLIENT_SESSION_EVENT_ASSURED_CONNECT_FAILED Deprecated -- see notes in solClient_session_startAssuredPublishing.The appliance rejected the AD Handshake to start Guaranteed publishing. Use SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN instead. 8 SOLCLIENT_SESSION_EVENT_ASSURED_DELIVERY_DOWN Guaranteed Delivery publishing is not available.The guaranteed delivery capability on the session has been disabled by some action on the appliance. 9 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR The Topic Endpoint unsubscribe command failed. 9 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_ERROR Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_ERROR is preferred. 10 SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK The Topic Endpoint unsubscribe completed. 10 SOLCLIENT_SESSION_EVENT_DTE_UNSUBSCRIBE_OK Deprecated name; SOLCLIENT_SESSION_EVENT_TE_UNSUBSCRIBE_OK is preferred. 11 SOLCLIENT_SESSION_EVENT_CAN_SEND The send is no longer blocked. 12 SOLCLIENT_SESSION_EVENT_RECONNECTING_NOTICE The Session has gone down, and an automatic reconnect attempt is in progress. 13 SOLCLIENT_SESSION_EVENT_RECONNECTED_NOTICE The automatic reconnect of the Session was successful, and the Session was established again. 14 SOLCLIENT_SESSION_EVENT_PROVISION_ERROR The endpoint create/delete command failed. 15 SOLCLIENT_SESSION_EVENT_PROVISION_OK The endpoint create/delete command completed. 16 SOLCLIENT_SESSION_EVENT_SUBSCRIPTION_OK The subscribe or unsubscribe operation has succeeded. 17 SOLCLIENT_SESSION_EVENT_VIRTUAL_ROUTER_NAME_CHANGED The appliance's Virtual Router Name changed during a reconnect operation.This could render existing queues or temporary topics invalid. 18 SOLCLIENT_SESSION_EVENT_MODIFYPROP_OK The session property modification completed. 19 SOLCLIENT_SESSION_EVENT_MODIFYPROP_FAIL The session property modification failed. 20 SOLCLIENT_SESSION_EVENT_REPUBLISH_UNACKED_MESSAGES After successfully reconnecting a disconnected session, the SDK received an unknown publisher flow name response when reconnecting the GD publisher flow.","title":"Event Code"},{"location":"tutor/market_data/streaming/#quote-format","text":"","title":"Quote Format"},{"location":"tutor/market_data/streaming/#tick_1","text":"","title":"Tick"},{"location":"tutor/market_data/streaming/#bidask_1","text":"","title":"BidAsk"},{"location":"tutor/market_data/streaming/#conclusion","text":"Contract object will be used by a lot of place like place order and subscribe quote etc... So Keep in mind how to get the contract you want to use.","title":"Conclusion"},{"location":"tutor/order/Future_Option/","text":"Place Order \u00b6 Future and Option place order jupyter link Login Shioaji \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Get Contract Object. \u00b6 In contract = api . Contracts . Futures . TXF . TXF202004 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , order_type = \"ROD\" , price_type = \"LMT\" , octype = \"Auto\" , account = api . futopt_account ) Order Object \u00b6 Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place order \u00b6 In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 For Example \u00b6 Place Order ROD LMT \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , order_type = \"ROD\" , price_type = \"LMT\" , octype = \"Auto\" , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Future and Option"},{"location":"tutor/order/Future_Option/#place-order","text":"Future and Option place order jupyter link","title":"Place Order"},{"location":"tutor/order/Future_Option/#login-shioaji","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , )","title":"Login Shioaji"},{"location":"tutor/order/Future_Option/#get-contract-object","text":"In contract = api . Contracts . Futures . TXF . TXF202004","title":"Get Contract Object."},{"location":"tutor/order/Future_Option/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Future_Option/#buy","text":"In order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , order_type = \"ROD\" , price_type = \"LMT\" , octype = \"Auto\" , account = api . futopt_account )","title":"Buy"},{"location":"tutor/order/Future_Option/#order-object","text":"Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } octype ( str ): the type or order to open new position or close position future only { Auto , NewPosition , Cover , DayTrade } ( \u81ea\u52d5 \u3001 \u65b0\u5009 \u3001 \u5e73\u5009 \u3001 \u7576\u6c96 ) account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/Future_Option/#place-order_1","text":"In trade = api . place_order ( contract , order ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place order"},{"location":"tutor/order/Future_Option/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Future_Option/#place-order-rod-lmt","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Futures . TXF . TXF202004 order = api . Order ( action = \"Buy\" , price = 10200 , quantity = 2 , order_type = \"ROD\" , price_type = \"LMT\" , octype = \"Auto\" , account = api . futopt_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = ' ' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 13 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order ROD LMT"},{"location":"tutor/order/Future_Option/#cancel-order","text":"In api . update_status ( api . futopt_account ) api . cancel_order ( trade ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 2 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Future_Option/#update-order","text":"In api . update_status ( api . futopt_account ) api . update_order ( trade = trade , price = 10200 , qty = 1 ) api . update_status ( api . futopt_account ) trade Out Trade ( contract = Future ( code = 'TXFD0' , symbol = 'TXF202004' , name = '\u81fa\u80a1\u671f\u8ca8' , category = 'TXF' , delivery_month = '202004' , underlying_kind = 'I' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 10200.0 , quantity = 2 , id = 'f691f576' , seqno = '862631' , ordno = 'ta0FG' , account = Account ( account_type =< AccountType . Stock : 'F' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f691f576' , status =< Status . Submitted : 'Submitted' > , status_code = '0000' , order_datetime = datetime . datetime ( 2020 , 3 , 5 , 10 , 24 , 15 ), modified_price = 10200.0 , cancel_quantity = 1 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/Stock/","text":"Place Order \u00b6 Stock place order jupyter link Login Shioaji \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Get Contract Object. \u00b6 In contract = api . Contracts . Stocks . TSE . TSE2890 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( price = 12 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , ) Sell \u00b6 In order = api . Order ( price = 12 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , ) First Sell \u00b6 In order = api . Order ( price = 14 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , first_sell = \"true\" , account = api . stock_account , ) Order Object \u00b6 Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order Stock { LMT , Close , LimitUp , LimitDown } Futures { LMT , MKT , MKP } order_type ( str ): the type of order Stock { Common , BlockTrade , Fixing , Odd } ( \u6574\u80a1 \u3001 \u9245\u984d \u3001 \u5b9a\u76e4 \u3001 \u96f6\u80a1 ) Futures { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } first_sell { str }: the type of first sell { true , false } account ( obj : Account ): which account to place this order ca ( binary ): the ca of this order Place Order \u00b6 In trade = api . place_order ( contract , order ) For Example \u00b6 Place Order LMT Common \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = '6d03647c' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 24 , 56 ), deals = [] ) ) Place Order about First Sell \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , first_sell = \"true\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 3 , id = '2f07907d' , seqno = '029480' , ordno = 'I0377' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2f07907d' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 46 , 55 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = '6d03647c' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 24 , 56 ), modified_price = 12.0 , cancel_quantity = 3 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.1 , qty = 1 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = 'a3eab5f6' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 47 , 46 ), modified_price = 12.1 , cancel_quantity = 1 , deals = [] ) )","title":"Stock"},{"location":"tutor/order/Stock/#place-order","text":"Stock place order jupyter link","title":"Place Order"},{"location":"tutor/order/Stock/#login-shioaji","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , )","title":"Login Shioaji"},{"location":"tutor/order/Stock/#get-contract-object","text":"In contract = api . Contracts . Stocks . TSE . TSE2890","title":"Get Contract Object."},{"location":"tutor/order/Stock/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Stock/#buy","text":"In order = api . Order ( price = 12 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , )","title":"Buy"},{"location":"tutor/order/Stock/#sell","text":"In order = api . Order ( price = 12 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account , )","title":"Sell"},{"location":"tutor/order/Stock/#first-sell","text":"In order = api . Order ( price = 14 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , first_sell = \"true\" , account = api . stock_account , )","title":"First Sell"},{"location":"tutor/order/Stock/#order-object","text":"Attributes: price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order Stock { LMT , Close , LimitUp , LimitDown } Futures { LMT , MKT , MKP } order_type ( str ): the type of order Stock { Common , BlockTrade , Fixing , Odd } ( \u6574\u80a1 \u3001 \u9245\u984d \u3001 \u5b9a\u76e4 \u3001 \u96f6\u80a1 ) Futures { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } first_sell { str }: the type of first sell { true , false } account ( obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/Stock/#place-order_1","text":"In trade = api . place_order ( contract , order )","title":"Place Order"},{"location":"tutor/order/Stock/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Stock/#place-order-lmt-common","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 3 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"Common\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = '6d03647c' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 24 , 56 ), deals = [] ) )","title":"Place Order LMT Common"},{"location":"tutor/order/Stock/#place-order-about-first-sell","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 3 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"Common\" , first_sell = \"true\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 3 , id = '2f07907d' , seqno = '029480' , ordno = 'I0377' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2f07907d' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 46 , 55 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order about First Sell"},{"location":"tutor/order/Stock/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = '6d03647c' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 24 , 56 ), modified_price = 12.0 , cancel_quantity = 3 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Stock/#update-order","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12.1 , qty = 1 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 3 , id = 'a3eab5f6' , seqno = '610615' , ordno = 'I2502' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< StockOrderType . Common : 'Common' > ), status = OrderStatus ( id = 'a3eab5f6' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 4 , 9 , 47 , 46 ), modified_price = 12.1 , cancel_quantity = 1 , deals = [] ) )","title":"Update Order"},{"location":"tutor/order/Stock_Trade_for_Trade/","text":"Place Order \u00b6 Stock TFT place order jupyter link Login Shioaji. \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True Get Contract Object. \u00b6 In contract = api . Contracts . Stocks . TSE . TSE2890 Making Order Object. \u00b6 Buy \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , account = api . stock_account ) Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , account = api . stock_account ) First Sell \u00b6 In order = api . Order ( price = 12 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , first_sell = \"true\" , account = api . stock_account ) Order Object \u00b6 Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u9918\u984d\u4ea4\u5272 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order Place Order \u00b6 In trade = api . place_order ( contract , order ) For Example \u00b6 Place Order ROD LMT \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) ) Place Order about First Sell \u00b6 In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , first_sell = \"true\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4 Cancel Order \u00b6 In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) ) Update Order \u00b6 In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Stock Trade for Trade"},{"location":"tutor/order/Stock_Trade_for_Trade/#place-order","text":"Stock TFT place order jupyter link","title":"Place Order"},{"location":"tutor/order/Stock_Trade_for_Trade/#login-shioaji","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True","title":"Login Shioaji."},{"location":"tutor/order/Stock_Trade_for_Trade/#get-contract-object","text":"In contract = api . Contracts . Stocks . TSE . TSE2890","title":"Get Contract Object."},{"location":"tutor/order/Stock_Trade_for_Trade/#making-order-object","text":"","title":"Making Order Object."},{"location":"tutor/order/Stock_Trade_for_Trade/#buy","text":"In order = api . Order ( price = 12 , quantity = 1 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , account = api . stock_account )","title":"Buy"},{"location":"tutor/order/Stock_Trade_for_Trade/#sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , account = api . stock_account )","title":"Sell"},{"location":"tutor/order/Stock_Trade_for_Trade/#first-sell","text":"In order = api . Order ( price = 12 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , order_lot = \"Common\" , first_sell = \"true\" , account = api . stock_account )","title":"First Sell"},{"location":"tutor/order/Stock_Trade_for_Trade/#order-object","text":"Attributes price ( float or int ): the price of order quantity ( int ): the quantity of order action ( str ): order action to buy or sell { Buy , Sell } price_type ( str ): pricing type of order { LMT , MKT , MKP } order_type ( str ): the type of order { ROD , IOC , FOK } order_cond ( str ): order condition stock only { Cash , Netting , MarginTrading , ShortSelling } ( \u73fe\u80a1 \u3001 \u9918\u984d\u4ea4\u5272 \u3001 \u878d\u8cc7 \u3001 \u878d\u5238 ) order_lot ( str ): the type of order { Common , Fixing , Odd } ( \u6574\u80a1 \u3001 \u5b9a\u76e4 \u3001 \u96f6\u80a1 ) first_sell { str }: the type of first sell { true , false } account (: obj : Account ): which account to place this order ca ( binary ): the ca of this order","title":"Order Object"},{"location":"tutor/order/Stock_Trade_for_Trade/#place-order_1","text":"In trade = api . place_order ( contract , order )","title":"Place Order"},{"location":"tutor/order/Stock_Trade_for_Trade/#for-example","text":"","title":"For Example"},{"location":"tutor/order/Stock_Trade_for_Trade/#place-order-rod-lmt","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) api . tft = True contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 12 , quantity = 10 , action = \"Buy\" , price_type = \"LMT\" , order_type = \"ROD\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = '004d9bed' , seqno = '427793' , ordno = 'WA345' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = '004d9bed' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 16 , 40 ), deals = [] ) )","title":"Place Order ROD LMT"},{"location":"tutor/order/Stock_Trade_for_Trade/#place-order-about-first-sell","text":"In import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" , contracts_timeout = 10000 ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) contract = api . Contracts . Stocks . TSE . TSE2890 order = api . Order ( price = 14 , quantity = 1 , action = \"Sell\" , price_type = \"LMT\" , order_type = \"ROD\" , first_sell = \"true\" , account = api . stock_account ) trade = api . place_order ( contract , order ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' , day_trade = 'Yes' ), order = Order ( action =< Action . Sell : 'Sell' > , price = 14 , quantity = 1 , id = '2bc5ae85' , seqno = '620137' , ordno = '00000' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > , first_sell =< StockFirstSell . Yes : 'true' > ), status = OrderStatus ( id = '2bc5ae85' , status =< Status . PendingSubmit : 'PendingSubmit' > , status_code = '0' , order_datetime = datetime . datetime ( 2020 , 3 , 9 , 8 , 59 , 42 ), deals = [] ) ) Status of Trade PendingSubmit : \u50b3\u9001\u4e2d PreSubmitted : \u9810\u7d04\u55ae Submitted : \u50b3\u9001\u6210\u529f Failed : \u5931\u6557 Cancelled : \u5df2\u522a\u9664 Filled : \u5b8c\u5168\u6210\u4ea4 Filling : \u90e8\u5206\u6210\u4ea4","title":"Place Order about First Sell"},{"location":"tutor/order/Stock_Trade_for_Trade/#cancel-order","text":"In api . update_status ( api . stock_account ) api . cancel_order ( trade ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'f3d8afdb' , seqno = '427797' , ordno = 'WA347' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'f3d8afdb' , status =< Status . Cancelled : 'Cancelled' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 49 ), cancel_quantity = 10 , deals = [] ) )","title":"Cancel Order"},{"location":"tutor/order/Stock_Trade_for_Trade/#update-order","text":"In api . update_status ( api . stock_account ) api . update_order ( trade = trade , price = 12 , qty = 2 ) api . update_status ( api . stock_account ) trade Out Trade ( contract = Stock ( exchange =< Exchange . TSE : 'TSE' > , code = '2890' , symbol = 'TSE2890' , name = '\u6c38\u8c50\u91d1' , category = '17' ), order = Order ( action =< Action . Buy : 'Buy' > , price = 12.0 , quantity = 10 , id = 'd5bfb75c' , seqno = '427795' , ordno = 'WA346' , account = Account ( account_type =< AccountType . Stock : 'S' > , person_id = 'RBCCJCBIGB' , broker_id = '9A95' , account_id = '9809975' , signed = True ), price_type =< StockPriceType . LMT : 'LMT' > , order_type =< FuturesOrderType . ROD : 'ROD' > ), status = OrderStatus ( id = 'd5bfb75c' , status =< Status . Submitted : 'Submitted' > , status_code = '00' , order_datetime = datetime . datetime ( 2020 , 3 , 3 , 15 , 17 , 17 ), cancel_quantity = 2 , deals = [] ) )","title":"Update Order"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"zh-tw"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}