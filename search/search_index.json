{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Overview"},{"location":"#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"#installation","text":"","title":"Installation"},{"location":"#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"quickstart/","text":"Initialization \u00b6 import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / . Streaming Market Data \u00b6 api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function. Place Order \u00b6 contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order. Conclusion \u00b6 This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Quick Start"},{"location":"quickstart/#initialization","text":"import shioaji as sj api = sj . Shioaji () accounts = api . login ( \"YOUR_PERSON_ID\" , \"YOUR_PASSWORD\" ) api . activate_ca ( ca_path = \"/c/your/ca/path/Sinopac.pfx\" , ca_passwd = \"YOUR_CA_PASSWORD\" , person_id = \"Person of this Ca\" , ) Just import our API library like other popular python library and new the instance to start using our API. Login your account and activate the certification then you can start placing order. The Certification Path In Windows you copy the file path with \\ to separate the file, you need to replace it with / .","title":"Initialization"},{"location":"quickstart/#streaming-market-data","text":"api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"tick\" ) api . quote . subscribe ( api . Contracts . Stocks [ \"2330\" ], quote_type = \"bidask\" ) api . quote . subscribe ( api . Contracts . Futures [ \"TXFC0\" ], quote_type = \"tick\" ) Subscribe the real time market data. Simplely pass contract into quote subscribe function and give the quote type will receive the streaming data. Quote Type Currently we support two quote type you can see in shioaji . constent . QuoteType . The best way to use that is directly pass this enum into subscribe function.","title":"Streaming Market Data"},{"location":"quickstart/#place-order","text":"contract = api . Contracts . Stocks [ \"2890\" ] order = api . Order ( price = 12 , quantity = 5 , action = sj . constant . Action . Buy , price_type = sj . constant . StockPriceType . LMT , order_type = sj . constant . StockOrderType . Common , ) trade = api . place_order ( contract , order ) Like the above subscribing market data using the contract, then need to define the order. Pass them into place_order function, then it will return the trade that describe the status of your order.","title":"Place Order"},{"location":"quickstart/#conclusion","text":"This quickstart demonstrates how easy to use our package for native Python users. Unlike many other trading API is hard for Python developer. We focus on making more pythonic trading API for our users.","title":"Conclusion"},{"location":"release/","text":"version: 0.1.1.dev8 (2020-02-27) \u00b6 fix: subscribe quote type feat: add tft quote callback id: b498281e release_at: 2020-02-27 07:07:42.005 version: 0.1.1.dev7 (2020-02-24) \u00b6 feat: add list positions with the summary id: fc53d871 release_at: 2020-02-24 08:29:02.749 version: 0.1.1.dev6 (2020-02-17) \u00b6 fix: remove ujson requirement id: 8f33a21f release_at: 2020-02-17 06:50:13.220 version: 0.1.1.dev5 (2020-02-17) \u00b6 fix: login speed slow id: ad8b2c75 release_at: 2020-02-17 03:31:59.709 version: 0.1.1.dev4 (2020-02-15) \u00b6 fix logout issue id: 2362453a release_at: 2020-02-15 00:36:54.737 version: 0.1.1.dev3 (2020-02-07) \u00b6 tft for update status tft for update order tft for cancel order id: 4a050ab4 release_at: 2020-02-07 09:19:09.221 version: 0.1.1.dev2 (2020-02-07) \u00b6 feat: sentry with user tracking id: 8f6e6663 release_at: 2020-02-07 06:47:07.788 version: 0.1.1.dev1 (2020-02-06) \u00b6 feat: error tracking with sentry enable id: 50e349a8 release_at: 2020-02-06 05:25:24.324 version: 0.1.1.dev0 (2020-01-31) \u00b6 fix: Shioaji update status id: d25d55e6 release_at: 2020-01-31 08:57:33.474 version: 0.1.0.dev9 (2020-01-21) \u00b6 feat: tft order id: 7a9d19c5 release_at: 2020-01-21 02:55:54.768 version: 0.1.0.dev8 (2020-01-09) \u00b6 feat: update_status callback mode feat: cancel_order callback mode feat: update_order callback mode feat: login with fetch contract callback id: ee3a6aa7 release_at: 2020-01-09 03:06:57.263 version: 0.1.0.dev7 (2020-01-08) \u00b6 -feat: logout check whether is logined id: 09bacfba release_at: 2020-01-08 01:23:59.236 version: 0.1.0.dev6 (2020-01-07) \u00b6 feat: logout api feat: contracts api id: b5f17777 release_at: 2020-01-07 08:10:41.943 version: 0.1.0.dev5 (2019-12-18) \u00b6 fix: pydantic union issue id: ef741288 release_at: 2019-12-18 05:38:08.555 version: 0.1.0.dev4 (2019-12-13) \u00b6 api ticks logout id: 61122fbd release_at: 2019-12-13 02:30:59.917","title":"Release Note"},{"location":"release/#version-011dev8-2020-02-27","text":"fix: subscribe quote type feat: add tft quote callback id: b498281e release_at: 2020-02-27 07:07:42.005","title":"version: 0.1.1.dev8 (2020-02-27)"},{"location":"release/#version-011dev7-2020-02-24","text":"feat: add list positions with the summary id: fc53d871 release_at: 2020-02-24 08:29:02.749","title":"version: 0.1.1.dev7 (2020-02-24)"},{"location":"release/#version-011dev6-2020-02-17","text":"fix: remove ujson requirement id: 8f33a21f release_at: 2020-02-17 06:50:13.220","title":"version: 0.1.1.dev6 (2020-02-17)"},{"location":"release/#version-011dev5-2020-02-17","text":"fix: login speed slow id: ad8b2c75 release_at: 2020-02-17 03:31:59.709","title":"version: 0.1.1.dev5 (2020-02-17)"},{"location":"release/#version-011dev4-2020-02-15","text":"fix logout issue id: 2362453a release_at: 2020-02-15 00:36:54.737","title":"version: 0.1.1.dev4 (2020-02-15)"},{"location":"release/#version-011dev3-2020-02-07","text":"tft for update status tft for update order tft for cancel order id: 4a050ab4 release_at: 2020-02-07 09:19:09.221","title":"version: 0.1.1.dev3 (2020-02-07)"},{"location":"release/#version-011dev2-2020-02-07","text":"feat: sentry with user tracking id: 8f6e6663 release_at: 2020-02-07 06:47:07.788","title":"version: 0.1.1.dev2 (2020-02-07)"},{"location":"release/#version-011dev1-2020-02-06","text":"feat: error tracking with sentry enable id: 50e349a8 release_at: 2020-02-06 05:25:24.324","title":"version: 0.1.1.dev1 (2020-02-06)"},{"location":"release/#version-011dev0-2020-01-31","text":"fix: Shioaji update status id: d25d55e6 release_at: 2020-01-31 08:57:33.474","title":"version: 0.1.1.dev0 (2020-01-31)"},{"location":"release/#version-010dev9-2020-01-21","text":"feat: tft order id: 7a9d19c5 release_at: 2020-01-21 02:55:54.768","title":"version: 0.1.0.dev9 (2020-01-21)"},{"location":"release/#version-010dev8-2020-01-09","text":"feat: update_status callback mode feat: cancel_order callback mode feat: update_order callback mode feat: login with fetch contract callback id: ee3a6aa7 release_at: 2020-01-09 03:06:57.263","title":"version: 0.1.0.dev8 (2020-01-09)"},{"location":"release/#version-010dev7-2020-01-08","text":"-feat: logout check whether is logined id: 09bacfba release_at: 2020-01-08 01:23:59.236","title":"version: 0.1.0.dev7 (2020-01-08)"},{"location":"release/#version-010dev6-2020-01-07","text":"feat: logout api feat: contracts api id: b5f17777 release_at: 2020-01-07 08:10:41.943","title":"version: 0.1.0.dev6 (2020-01-07)"},{"location":"release/#version-010dev5-2019-12-18","text":"fix: pydantic union issue id: ef741288 release_at: 2019-12-18 05:38:08.555","title":"version: 0.1.0.dev5 (2019-12-18)"},{"location":"release/#version-010dev4-2019-12-13","text":"api ticks logout id: 61122fbd release_at: 2019-12-13 02:30:59.917","title":"version: 0.1.0.dev4 (2019-12-13)"},{"location":"tutor/contract/","text":"Shioaji \u00b6 Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Contract"},{"location":"tutor/contract/#shioaji","text":"Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"tutor/contract/#installation","text":"","title":"Installation"},{"location":"tutor/contract/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"tutor/contract/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"tutor/order/","text":"Shioaji \u00b6 Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Order"},{"location":"tutor/order/#shioaji","text":"Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"tutor/order/#installation","text":"","title":"Installation"},{"location":"tutor/order/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"tutor/order/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"tutor/subscribe/","text":"Shioaji \u00b6 Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Subscribe Quote"},{"location":"tutor/subscribe/#shioaji","text":"Shioaji is provided by SinoPac the most pythonic API for trading the Taiwan and global financial market. You can use your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with integrated the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"tutor/subscribe/#installation","text":"","title":"Installation"},{"location":"tutor/subscribe/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"tutor/subscribe/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"},{"location":"zh-tw/","text":"Shioaji \u00b6 Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan. Installation \u00b6 Binaries \u00b6 simple using pip to install pip install shioaji update shioaji with pip install -U shioaji Docker Image \u00b6 simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"zh-tw"},{"location":"zh-tw/#shioaji","text":"Shioaji is the most pythonic API for trading the Taiwan and global financial market. You can integrated your favorite Python packages such as NumPy, pandas, PyTorch or TensorFlow to build your trading model with the Shioaji API on cross-platform. We are in early-release alpha. Expect some adventures and rough edges. The key features are: Fast: High performance with c++ implement core and FPGA event broker. Easy: Designed to be easy to use and learn. Fast to code: With native python to integrate with large python ecosystem. Cross-Platform: The first one python trading API with Linux compatible in Taiwan.","title":"Shioaji"},{"location":"zh-tw/#installation","text":"","title":"Installation"},{"location":"zh-tw/#binaries","text":"simple using pip to install pip install shioaji update shioaji with pip install -U shioaji","title":"Binaries"},{"location":"zh-tw/#docker-image","text":"simple run with interactive mode in docker docker run -it sinotrade/shioaji:latest run with jupyter lab or notebook docker run -p 8888:8888 sinotrade/shioaji:jupyter","title":"Docker Image"}]}